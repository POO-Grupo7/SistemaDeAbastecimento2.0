package View;

import Controller.ClienteController;
import Controller.HistoricoHidrometroController;
import Model.ClienteModel;
import Model.HidrometroModel;
import Model.HistoricoHidrometroModel;
import View.table.TableCustom;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import net.miginfocom.swing.MigLayout;

public class HistoricoHidrometroView extends javax.swing.JFrame {

    public HistoricoHidrometroView() {
        initComponents();
        RestaurarDadosComboBoxCliente();
        RestaurarDadosComboBoxHidrometro();
        listarHistoricoHidrometro();
        testData(tabelaHistorico);
        getContentPane().setBackground(Color.white);
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);

    }

    private void testData(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
//        "ID", "Nome", "Apelido", "Naturalidade", "Data Nascimento", "Email", "Função", "Usuario", "Senha", "Perfil", "Activo", "Disp"       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        painelPrincipal = new javax.swing.JPanel();
        painelCabecalho = new javax.swing.JPanel();
        lblCabecalho = new javax.swing.JLabel();
        txtNomeAPesquisar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        painelConteudo = new javax.swing.JPanel();
        painelConteudoEsquerdo = new javax.swing.JPanel();
        painelVoltarMenu1 = new javax.swing.JPanel();
        btnVoltarMenu = new javax.swing.JButton();
        lblCabecalho1 = new javax.swing.JLabel();
        lblIconLogo = new javax.swing.JLabel();
        painelContCentral = new javax.swing.JPanel();
        painelSuperiorDados = new javax.swing.JPanel();
        painelEsqDados = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        cbxNomeDoCliente = new javax.swing.JComboBox<>();
        lblNomeDoCliente = new javax.swing.JLabel();
        lblBairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        lblQuarterao = new javax.swing.JLabel();
        txtQuarterao = new javax.swing.JTextField();
        lblNumeroDaCasa = new javax.swing.JLabel();
        txtNumeroDeCasa = new javax.swing.JTextField();
        lblMesDeReferencia = new javax.swing.JLabel();
        lblDataDeEmissao = new javax.swing.JLabel();
        txtDataInicio = new com.toedter.calendar.JDateChooser();
        txtDataFim = new com.toedter.calendar.JDateChooser();
        painelDirDados = new javax.swing.JPanel();
        lblNumeroDeHidrometro = new javax.swing.JLabel();
        lblLeituraAnterior = new javax.swing.JLabel();
        txtLeituraActual = new javax.swing.JTextField();
        lblLeituraActual = new javax.swing.JLabel();
        lblConsumoDoMes = new javax.swing.JLabel();
        txtConsumoDoMes = new javax.swing.JTextField();
        txtOcorrencia = new javax.swing.JTextField();
        lblOcorrencia = new javax.swing.JLabel();
        lblNumeroDaLeitura = new javax.swing.JLabel();
        txtNumeroDaLeitura = new javax.swing.JTextField();
        txtSaldoActual = new javax.swing.JTextField();
        lblSaldoActual = new javax.swing.JLabel();
        btnApagados = new javax.swing.JButton();
        cbxMesDeReferencia = new javax.swing.JComboBox<>();
        cbxHidrometro = new javax.swing.JComboBox<>();
        painelInferiorBotoesTabela = new javax.swing.JPanel();
        tabela = new javax.swing.JPanel();
        botoes = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCarregarCampos = new javax.swing.JButton();
        btnLimparCampos = new javax.swing.JButton();
        btnApagar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHistorico = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HIDROMETRO");
        setMinimumSize(new java.awt.Dimension(1180, 650));

        painelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        painelPrincipal.setPreferredSize(new java.awt.Dimension(1260, 720));
        painelPrincipal.setLayout(new java.awt.BorderLayout());

        painelCabecalho.setBackground(new java.awt.Color(255, 255, 255));
        painelCabecalho.setForeground(new java.awt.Color(255, 255, 255));

        lblCabecalho.setFont(new java.awt.Font("Arial", 1, 40)); // NOI18N
        lblCabecalho.setText("Uso dos Hidrometros");

        txtNomeAPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeAPesquisarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8_paid_search_32px.png"))); // NOI18N

        javax.swing.GroupLayout painelCabecalhoLayout = new javax.swing.GroupLayout(painelCabecalho);
        painelCabecalho.setLayout(painelCabecalhoLayout);
        painelCabecalhoLayout.setHorizontalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCabecalhoLayout.createSequentialGroup()
                .addComponent(lblCabecalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 781, Short.MAX_VALUE)
                .addComponent(txtNomeAPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
        );
        painelCabecalhoLayout.setVerticalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCabecalhoLayout.createSequentialGroup()
                .addComponent(lblCabecalho)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtNomeAPesquisar))
                .addContainerGap())
        );

        painelPrincipal.add(painelCabecalho, java.awt.BorderLayout.NORTH);

        painelConteudo.setBackground(new java.awt.Color(255, 255, 255));
        painelConteudo.setAlignmentX(0.0F);
        painelConteudo.setAlignmentY(0.0F);
        painelConteudo.setInheritsPopupMenu(true);
        painelConteudo.setLayout(new java.awt.BorderLayout(10, 10));

        painelConteudoEsquerdo.setBackground(new java.awt.Color(52, 102, 138));
        painelConteudoEsquerdo.setLayout(new java.awt.BorderLayout());

        painelVoltarMenu1.setBackground(new java.awt.Color(52, 102, 138));
        painelVoltarMenu1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                painelVoltarMenu1KeyPressed(evt);
            }
        });

        btnVoltarMenu.setBackground(new java.awt.Color(52, 102, 138));
        btnVoltarMenu.setForeground(new java.awt.Color(52, 102, 138));
        btnVoltarMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8-menu-48.png"))); // NOI18N
        btnVoltarMenu.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 2, true));
        btnVoltarMenu.setContentAreaFilled(false);
        btnVoltarMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnVoltarMenu.setDisabledIcon(null);
        btnVoltarMenu.setDisabledSelectedIcon(null);
        btnVoltarMenu.setOpaque(true);
        btnVoltarMenu.setSelected(true);
        btnVoltarMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVoltarMenuMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnVoltarMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnVoltarMenuMouseExited(evt);
            }
        });
        btnVoltarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarMenuActionPerformed(evt);
            }
        });
        painelVoltarMenu1.add(btnVoltarMenu);

        lblCabecalho1.setBackground(new java.awt.Color(52, 102, 138));
        lblCabecalho1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblCabecalho1.setForeground(new java.awt.Color(255, 255, 255));
        lblCabecalho1.setText("Voltar");
        painelVoltarMenu1.add(lblCabecalho1);

        painelConteudoEsquerdo.add(painelVoltarMenu1, java.awt.BorderLayout.NORTH);

        lblIconLogo.setBackground(new java.awt.Color(52, 102, 138));
        lblIconLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8_speed_256px.png"))); // NOI18N
        painelConteudoEsquerdo.add(lblIconLogo, java.awt.BorderLayout.CENTER);

        painelConteudo.add(painelConteudoEsquerdo, java.awt.BorderLayout.WEST);

        painelContCentral.setBackground(new java.awt.Color(255, 255, 255));
        painelContCentral.setLayout(new java.awt.BorderLayout());

        painelSuperiorDados.setBackground(new java.awt.Color(255, 255, 255));
        painelSuperiorDados.setLayout(new java.awt.GridLayout(1, 2));

        painelEsqDados.setBackground(new java.awt.Color(255, 255, 255));
        painelEsqDados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(13, 43, 64)));

        lblId.setText("Id:");

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        cbxNomeDoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));
        cbxNomeDoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNomeDoClienteActionPerformed(evt);
            }
        });

        lblNomeDoCliente.setText("Nome do Cliente:*");

        lblBairro.setText("Bairro:*");

        txtBairro.setEditable(false);

        lblQuarterao.setText("Quarteirao:*");

        txtQuarterao.setEditable(false);
        txtQuarterao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuarteraoActionPerformed(evt);
            }
        });

        lblNumeroDaCasa.setText("Numero da Casa:*");

        txtNumeroDeCasa.setEditable(false);
        txtNumeroDeCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroDeCasaActionPerformed(evt);
            }
        });

        lblMesDeReferencia.setText("Data de Inicio:*");

        lblDataDeEmissao.setText("Data de Fim:");

        txtDataInicio.setDateFormatString("dd/MM/yyyy");

        txtDataFim.setDateFormatString("dd/MM/yyyy");

        javax.swing.GroupLayout painelEsqDadosLayout = new javax.swing.GroupLayout(painelEsqDados);
        painelEsqDados.setLayout(painelEsqDadosLayout);
        painelEsqDadosLayout.setHorizontalGroup(
            painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEsqDadosLayout.createSequentialGroup()
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNomeDoCliente)
                            .addComponent(lblBairro)
                            .addComponent(lblId))
                        .addGap(61, 61, 61)
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addComponent(txtBairro)
                                .addGap(174, 174, 174))
                            .addComponent(cbxNomeDoCliente, 0, 391, Short.MAX_VALUE)))
                    .addGroup(painelEsqDadosLayout.createSequentialGroup()
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblQuarterao)
                            .addComponent(lblMesDeReferencia)
                            .addComponent(lblNumeroDaCasa)
                            .addComponent(lblDataDeEmissao))
                        .addGap(63, 63, 63)
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNumeroDeCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuarterao))
                                .addGap(20, 20, 20))
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDataInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                    .addComponent(txtDataFim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        painelEsqDadosLayout.setVerticalGroup(
            painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEsqDadosLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblId))
                    .addComponent(txtId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomeDoCliente)
                    .addComponent(cbxNomeDoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBairro)
                    .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuarterao)
                    .addComponent(txtQuarterao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumeroDaCasa)
                    .addComponent(txtNumeroDeCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMesDeReferencia)
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDataDeEmissao)
                    .addComponent(txtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        painelSuperiorDados.add(painelEsqDados);

        painelDirDados.setBackground(new java.awt.Color(255, 255, 255));
        painelDirDados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(13, 43, 64)));

        lblNumeroDeHidrometro.setText("Numero de Hidrometro:");

        lblLeituraAnterior.setText("Taxa de Consumo");

        txtLeituraActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLeituraActualActionPerformed(evt);
            }
        });

        lblLeituraActual.setText("Leitura Actual:*");

        lblConsumoDoMes.setText("Consumo do mes:");

        txtConsumoDoMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConsumoDoMesActionPerformed(evt);
            }
        });

        txtOcorrencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOcorrenciaActionPerformed(evt);
            }
        });

        lblOcorrencia.setText("Ocorrencia:");

        lblNumeroDaLeitura.setText("Numero da Leitura:");

        txtNumeroDaLeitura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroDaLeituraActionPerformed(evt);
            }
        });

        lblSaldoActual.setText("Saldo Actual:");

        btnApagados.setBackground(new java.awt.Color(255, 0, 51));
        btnApagados.setText("Ver Apagados");

        cbxMesDeReferencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        cbxMesDeReferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMesDeReferenciaActionPerformed(evt);
            }
        });

        cbxHidrometro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Selecione>" }));

        javax.swing.GroupLayout painelDirDadosLayout = new javax.swing.GroupLayout(painelDirDados);
        painelDirDados.setLayout(painelDirDadosLayout);
        painelDirDadosLayout.setHorizontalGroup(
            painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDirDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLeituraActual)
                    .addComponent(lblNumeroDaLeitura)
                    .addComponent(lblSaldoActual)
                    .addComponent(lblConsumoDoMes)
                    .addComponent(lblOcorrencia)
                    .addComponent(lblLeituraAnterior)
                    .addComponent(lblNumeroDeHidrometro))
                .addGap(38, 38, 38)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addComponent(txtConsumoDoMes, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addGap(165, 165, 165))
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addComponent(btnApagados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(126, 126, 126))
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addComponent(txtSaldoActual)
                        .addGap(162, 162, 162))
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbxMesDeReferencia, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOcorrencia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(txtNumeroDaLeitura)
                            .addComponent(txtLeituraActual, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxHidrometro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        painelDirDadosLayout.setVerticalGroup(
            painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDirDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumeroDeHidrometro)
                    .addComponent(cbxHidrometro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLeituraAnterior)
                    .addComponent(cbxMesDeReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLeituraActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLeituraActual, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConsumoDoMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConsumoDoMes))
                .addGap(18, 18, 18)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOcorrencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOcorrencia))
                .addGap(18, 18, 18)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumeroDaLeitura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumeroDaLeitura))
                .addGap(18, 18, 18)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoActual)
                    .addComponent(txtSaldoActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btnApagados)
                .addGap(74, 74, 74))
        );

        painelSuperiorDados.add(painelDirDados);

        painelContCentral.add(painelSuperiorDados, java.awt.BorderLayout.PAGE_START);

        painelInferiorBotoesTabela.setBackground(new java.awt.Color(255, 255, 255));
        painelInferiorBotoesTabela.setLayout(new java.awt.BorderLayout());

        tabela.setBackground(new java.awt.Color(255, 255, 255));
        tabela.setLayout(new java.awt.BorderLayout());

        botoes.setBackground(new java.awt.Color(255, 255, 255));
        java.awt.GridBagLayout botoesLayout = new java.awt.GridBagLayout();
        botoesLayout.columnWidths = new int[] {0};
        botoesLayout.rowHeights = new int[] {0};
        botoes.setLayout(botoesLayout);

        btnSalvar.setBackground(new java.awt.Color(52, 102, 138));
        btnSalvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnSalvar, gridBagConstraints);

        btnActualizar.setBackground(new java.awt.Color(52, 102, 138));
        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnActualizar, gridBagConstraints);

        btnCarregarCampos.setBackground(new java.awt.Color(52, 102, 138));
        btnCarregarCampos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCarregarCampos.setForeground(new java.awt.Color(255, 255, 255));
        btnCarregarCampos.setText("Carregar Campos");
        btnCarregarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarCamposActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnCarregarCampos, gridBagConstraints);

        btnLimparCampos.setBackground(new java.awt.Color(52, 102, 138));
        btnLimparCampos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLimparCampos.setForeground(new java.awt.Color(255, 255, 255));
        btnLimparCampos.setText("Limpar Campos");
        btnLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnLimparCampos, gridBagConstraints);

        btnApagar.setBackground(new java.awt.Color(52, 102, 138));
        btnApagar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnApagar.setForeground(new java.awt.Color(255, 255, 255));
        btnApagar.setText("Apagar");
        btnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnApagar, gridBagConstraints);

        tabela.add(botoes, java.awt.BorderLayout.PAGE_START);

        tabelaHistorico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabelaHistorico.setForeground(new java.awt.Color(255, 255, 255));
        tabelaHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nome do cliente", "Bairro", "Quarterao", "Numero da casa", "Data de Inicio", "Data de Fim", "Numero de Hidrometro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaHistorico);

        tabela.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        painelInferiorBotoesTabela.add(tabela, java.awt.BorderLayout.CENTER);

        painelContCentral.add(painelInferiorBotoesTabela, java.awt.BorderLayout.CENTER);

        painelConteudo.add(painelContCentral, java.awt.BorderLayout.CENTER);

        painelPrincipal.add(painelConteudo, java.awt.BorderLayout.CENTER);

        getContentPane().add(painelPrincipal, java.awt.BorderLayout.CENTER);

        jMenuBar1.setAlignmentY(0.5F);
        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N

        jMenu2.setText("File");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Gerir Hidrometro");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarregarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarCamposActionPerformed
        carregarCampos();
    }//GEN-LAST:event_btnCarregarCamposActionPerformed

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparCamposActionPerformed

    private void btnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarActionPerformed
        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza que apagar?", "Confirmação de Saída", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            apagarHistoricoHidrometro();
            limparCampos();
            listarHistoricoHidrometro();
        }
    }//GEN-LAST:event_btnApagarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza que salvar?", "Confirmação de Saída", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            guardarHistorico();
            listarHistoricoHidrometro();
            limparCampos();
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtNomeAPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeAPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeAPesquisarActionPerformed

    private void cbxNomeDoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNomeDoClienteActionPerformed
        AccaoComboxClientes();
    }//GEN-LAST:event_cbxNomeDoClienteActionPerformed

    private void txtQuarteraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuarteraoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuarteraoActionPerformed

    private void txtNumeroDeCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroDeCasaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroDeCasaActionPerformed

    private void cbxMesDeReferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMesDeReferenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxMesDeReferenciaActionPerformed

    private void txtLeituraActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLeituraActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLeituraActualActionPerformed

    private void txtConsumoDoMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConsumoDoMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConsumoDoMesActionPerformed

    private void txtOcorrenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOcorrenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOcorrenciaActionPerformed

    private void txtNumeroDaLeituraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroDaLeituraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroDaLeituraActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnVoltarMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenuMouseClicked
        btnVoltarMenu.setBackground(new Color(52, 102, 138));
    }//GEN-LAST:event_btnVoltarMenuMouseClicked

    private void btnVoltarMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenuMouseEntered
        btnVoltarMenu.setBackground(new Color(45, 45, 45));
    }//GEN-LAST:event_btnVoltarMenuMouseEntered

    private void btnVoltarMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenuMouseExited
        btnVoltarMenu.setBackground(new Color(52, 102, 138));
    }//GEN-LAST:event_btnVoltarMenuMouseExited

    private void btnVoltarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarMenuActionPerformed
        new MenuPrincipal().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarMenuActionPerformed

    private void painelVoltarMenu1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_painelVoltarMenu1KeyPressed

    }//GEN-LAST:event_painelVoltarMenu1KeyPressed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
//        new HidrometroView().setVisible(true);
//        dispose();
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja actualizar?", "Confirmação de Saída", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            actualizarHistoricoHidrometro();
            listarHistoricoHidrometro();
            limparCampos();
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            FlatCyanLightIJTheme.setup();
//            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistoricoHidrometroView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel botoes;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnApagados;
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnCarregarCampos;
    private javax.swing.JButton btnLimparCampos;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnVoltarMenu;
    private javax.swing.JComboBox<String> cbxHidrometro;
    private javax.swing.JComboBox<String> cbxMesDeReferencia;
    private javax.swing.JComboBox<String> cbxNomeDoCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBairro;
    private javax.swing.JLabel lblCabecalho;
    private javax.swing.JLabel lblCabecalho1;
    private javax.swing.JLabel lblConsumoDoMes;
    private javax.swing.JLabel lblDataDeEmissao;
    private javax.swing.JLabel lblIconLogo;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLeituraActual;
    private javax.swing.JLabel lblLeituraAnterior;
    private javax.swing.JLabel lblMesDeReferencia;
    private javax.swing.JLabel lblNomeDoCliente;
    private javax.swing.JLabel lblNumeroDaCasa;
    private javax.swing.JLabel lblNumeroDaLeitura;
    private javax.swing.JLabel lblNumeroDeHidrometro;
    private javax.swing.JLabel lblOcorrencia;
    private javax.swing.JLabel lblQuarterao;
    private javax.swing.JLabel lblSaldoActual;
    private javax.swing.JPanel painelCabecalho;
    private javax.swing.JPanel painelContCentral;
    private javax.swing.JPanel painelConteudo;
    private javax.swing.JPanel painelConteudoEsquerdo;
    private javax.swing.JPanel painelDirDados;
    private javax.swing.JPanel painelEsqDados;
    private javax.swing.JPanel painelInferiorBotoesTabela;
    private javax.swing.JPanel painelPrincipal;
    private javax.swing.JPanel painelSuperiorDados;
    private javax.swing.JPanel painelVoltarMenu1;
    private javax.swing.JPanel tabela;
    private javax.swing.JTable tabelaHistorico;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtConsumoDoMes;
    private com.toedter.calendar.JDateChooser txtDataFim;
    private com.toedter.calendar.JDateChooser txtDataInicio;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLeituraActual;
    private javax.swing.JTextField txtNomeAPesquisar;
    private javax.swing.JTextField txtNumeroDaLeitura;
    private javax.swing.JTextField txtNumeroDeCasa;
    private javax.swing.JTextField txtOcorrencia;
    private javax.swing.JTextField txtQuarterao;
    private javax.swing.JTextField txtSaldoActual;
    // End of variables declaration//GEN-END:variables

    //Metodo que pega clientes activos na BD para jcboxClientes
    private void RestaurarDadosComboBoxCliente() {
        try {
            HistoricoHidrometroController historicoHidrometroController = new HistoricoHidrometroController();
            ResultSet rs = historicoHidrometroController.listarClientes();

            while (rs.next()) {
                idCliente.addElement(rs.getInt(1));
                cbxNomeDoCliente.addItem(rs.getString(2));
            }
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "ListarClientesView HistoricoHidrom" + erro);
        }
    }

    //Metodo que pega hidrometros operacionais na BD para jcboxHidrometro
    private void RestaurarDadosComboBoxHidrometro() {
        try {
            HistoricoHidrometroController historicoHidrometroController = new HistoricoHidrometroController();
            ResultSet rs = historicoHidrometroController.listarHidrometros();

            while (rs.next()) {
                idCliente.addElement(rs.getInt(1));
                cbxHidrometro.addItem(rs.getString(3));
            }
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "ListarHidrometro HistoricoHidromView" + erro);
        }
    }

    //Accao para o JcomboxClientes
    Vector<Integer> idCliente = new Vector<Integer>();
    Vector<Integer> idHidrometro = new Vector<Integer>();

    private void AccaoComboxClientes() {
        if (cbxNomeDoCliente.getSelectedIndex() == 0) {
            txtBairro.setText("");
            txtQuarterao.setText("");
            txtNumeroDeCasa.setText("");
            txtSaldoActual.setText("");
            return;
        }
        try {
            HistoricoHidrometroController historicoHidrometroController = new HistoricoHidrometroController();
            ResultSet rs = historicoHidrometroController.pesquisarClientes(idCliente.get(cbxNomeDoCliente.getSelectedIndex() - 1));

            while (rs.next()) {
                txtBairro.setText(rs.getString(3));
                txtQuarterao.setText(rs.getString(4));
                txtNumeroDeCasa.setText(rs.getString(5));
                txtSaldoActual.setText(rs.getString(10));
            }
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "HistoricoHidroView pegar valores de clientes" + erro);
        }
    }

//    private void AccaoComboxHidrometro() {
//        try {
//            HistoricoHidrometroController historicoHidrometroController = new HistoricoHidrometroController();
//            ResultSet rs = historicoHidrometroController.pesquisarHidrometro(idHidrometro.get(cbxHidrometro.getSelectedIndex() - 1));
//
//            while (rs.next()) {
////                txtBairro.setText(rs.getString(3));
////                txtQuarterao.setText(rs.getString(4));
////                txtNumeroDeCasa.setText(rs.getString(5));
////                txtSaldoActual.setText(rs.getString(10));
//            }
//        } catch (SQLException erro) {
//            JOptionPane.showMessageDialog(null, "HistoricoHidroView pegar valores de hidrometro" + erro);
//        }
//    }
    //Metodo guardarHistorico
    private void guardarHistorico() {
        String nome = cbxNomeDoCliente.getSelectedItem().toString();
        String bairro = txtBairro.getText().trim();
        int quarteirao = Integer.parseInt(txtQuarterao.getText().trim());
        int nr = Integer.parseInt(txtNumeroDeCasa.getText().trim());

        Date selectedDate = txtDataInicio.getDate();
        Date selectedDateOfEnd = txtDataFim.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String dataInicio = dateFormat.format(selectedDate);
        String dataFim = dateFormat.format(selectedDateOfEnd);

        String nrHidrometro = cbxHidrometro.getSelectedItem().toString();
        double saldoCliente = Double.parseDouble(txtSaldoActual.getText());

        // Verificações de campos
        HistoricoHidrometroModel historicoHidrometroModel = new HistoricoHidrometroModel();
        ClienteModel cliente = new ClienteModel();
        cliente.setNome(nome);
        cliente.setBairro(bairro);
        cliente.setQuarteirao(quarteirao);
        cliente.setNrDaCasa(nr);
        cliente.setSaldo(saldoCliente);

        historicoHidrometroModel.setCliente(cliente);

        historicoHidrometroModel.setDataInicial(dataInicio);
        historicoHidrometroModel.setDataFinal(dataFim);

        HidrometroModel hidroometroModel = new HidrometroModel();
        hidroometroModel.setNrHidrometro(nrHidrometro);
        historicoHidrometroModel.setHidrometro(hidroometroModel);

        // Cadastrar cliente através do controlador
        HistoricoHidrometroController historicoHidrometroControler = new HistoricoHidrometroController();
        historicoHidrometroControler.cadastrarHistoricoHidometro(historicoHidrometroModel);

    }

    //Metodo para Listar HistoricoHidrometro
    private void listarHistoricoHidrometro() {
        try {
            HistoricoHidrometroController historicoHidrometroController = new HistoricoHidrometroController();

            DefaultTableModel model = (DefaultTableModel) tabelaHistorico.getModel();
            model.setRowCount(0); // Limpar a tabela antes de listar novamente

//            tabelaClientes.setModel(model);
            ArrayList<HistoricoHidrometroModel> lista = historicoHidrometroController.listarHistoricoHidometro();
            System.out.println("historico encontrados: " + lista.size());
            System.out.println(lista.isEmpty());

            // Preencher a tabela com os dados dos clientes
            for (HistoricoHidrometroModel item : lista) {
                model.addRow(new Object[]{
                    item.getIdHistoricoHidrometro(),
                    item.getCliente().getNome(),
                    item.getCliente().getBairro(),
                    item.getCliente().getQuarteirao(), // Certifique-se de usar o índice correto
                    item.getCliente().getNrDaCasa(), // Certifique-se de usar o índice correto
//                    item.getCliente().getSaldo(), // Certifique-se de usar o índice correto
                    item.getDataInicial(),
                    item.getDataFinal(),
                    item.getHidrometro().getNrHidrometro()
                });
            }
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "Erro ao listar clientes: " + erro.getMessage());
        }
    }

    //Metodo Carregar Campos
    private void carregarCampos() {
        int setar = tabelaHistorico.getSelectedRow();
        txtId.setText(tabelaHistorico.getModel().getValueAt(setar, 0).toString());
        cbxNomeDoCliente.setSelectedItem(tabelaHistorico.getModel().getValueAt(setar, 1).toString());
        txtBairro.setText(tabelaHistorico.getModel().getValueAt(setar, 2).toString());
        txtQuarterao.setText(tabelaHistorico.getModel().getValueAt(setar, 3).toString());
        txtNumeroDeCasa.setText(tabelaHistorico.getModel().getValueAt(setar, 4).toString());

        // Carregar txtDataInicio
        String dataInicioStr = tabelaHistorico.getModel().getValueAt(setar, 5).toString();
        try {
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy"); // Formato da data no seu banco de dados
            Date dataInicio = formato.parse(dataInicioStr);
            txtDataInicio.setDate(dataInicio);
        } catch (ParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao formatar data de início.");
        }

        // Carregar txtDataFim
        String dataFimStr = tabelaHistorico.getModel().getValueAt(setar, 6).toString();
        try {
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            Date dataFim = formato.parse(dataFimStr);
            txtDataFim.setDate(dataFim);
        } catch (ParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao formatar data de fim.");
        }

        cbxHidrometro.setSelectedItem(tabelaHistorico.getModel().getValueAt(setar, 7).toString());
    }

    //Metodo Limpar Campos
    private void limparCampos() {
        txtId.setText("");
        cbxNomeDoCliente.setSelectedIndex(0);
        txtBairro.setText("");
        txtQuarterao.setText("");
        txtNumeroDeCasa.setText("");
        txtDataInicio.setDate(null);
        txtDataFim.setDate(null);
        cbxHidrometro.setSelectedIndex(0);
    }

    //Metodo Actualizar Historico
    private void actualizarHistoricoHidrometro() {
        int id = Integer.parseInt(txtId.getText());
        String nomeCliente = cbxNomeDoCliente.getSelectedItem().toString();
        String bairro = txtBairro.getText().trim();
        int quarteirao = Integer.parseInt(txtQuarterao.getText().trim());
        int nr = Integer.parseInt(txtNumeroDeCasa.getText().trim());

        Date selectedDate = txtDataInicio.getDate();
        Date selectedDateOfEnd = txtDataFim.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String dataInicio = dateFormat.format(selectedDate);
        String dataFim = dateFormat.format(selectedDateOfEnd);

        String nrHidrometro = cbxHidrometro.getSelectedItem().toString();

        // Verificações
        HistoricoHidrometroModel historicoHidrometroModel = new HistoricoHidrometroModel();
        historicoHidrometroModel.setIdHistoricoHidrometro(id);

        ClienteModel cliente = new ClienteModel();

        cliente.setNome(nomeCliente);
        cliente.setBairro(bairro);
        cliente.setQuarteirao(quarteirao);
        cliente.setNrDaCasa(nr);

        historicoHidrometroModel.setCliente(cliente);

        historicoHidrometroModel.setDataInicial(dataInicio);
        historicoHidrometroModel.setDataFinal(dataFim);

        HidrometroModel hidroometroModel = new HidrometroModel();
        hidroometroModel.setNrHidrometro(nrHidrometro);
        historicoHidrometroModel.setHidrometro(hidroometroModel);

        HistoricoHidrometroController historicoHidrometroControler = new HistoricoHidrometroController();
        historicoHidrometroControler.actualizarHistoricoHidometro(historicoHidrometroModel);
    }

    //Metodo apagar Historico
    private void apagarHistoricoHidrometro() {
        int id = Integer.parseInt(txtId.getText());
        String nomeCliente = cbxNomeDoCliente.getSelectedItem().toString();
        String bairro = txtBairro.getText().trim();
        int quarteirao = Integer.parseInt(txtQuarterao.getText().trim());
        int nr = Integer.parseInt(txtNumeroDeCasa.getText().trim());

        Date selectedDate = txtDataInicio.getDate();
        Date selectedDateOfEnd = txtDataFim.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String dataInicio = dateFormat.format(selectedDate);
        String dataFim = dateFormat.format(selectedDateOfEnd);

        String nrHidrometro = cbxHidrometro.getSelectedItem().toString();
        double saldoCliente = Double.parseDouble(txtSaldoActual.getText());

        // Verificações
        HistoricoHidrometroModel historicoHidrometroModel = new HistoricoHidrometroModel();
        historicoHidrometroModel.setIdHistoricoHidrometro(id);

        ClienteModel cliente = new ClienteModel();

        cliente.setNome(nomeCliente);
        cliente.setBairro(bairro);
        cliente.setQuarteirao(quarteirao);
        cliente.setNrDaCasa(nr);
        cliente.setSaldo(saldoCliente);

        historicoHidrometroModel.setCliente(cliente);

        historicoHidrometroModel.setDataInicial(dataInicio);
        historicoHidrometroModel.setDataFinal(dataFim);

        HidrometroModel hidroometroModel = new HidrometroModel();
        hidroometroModel.setNrHidrometro(nrHidrometro);
        historicoHidrometroModel.setHidrometro(hidroometroModel);
        historicoHidrometroModel.setApagado(true);

        HistoricoHidrometroController historicoHidrometroControler = new HistoricoHidrometroController();
        historicoHidrometroControler.apagarHistoricoHidometro(historicoHidrometroModel);
    }
}
