package View;

import Controller.FuncionarioController;
import Model.FuncionarioModel;
import View.table.TableCustom;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import net.miginfocom.swing.MigLayout;

public class UsuariosView1 extends javax.swing.JFrame {

    public UsuariosView1() {
        initComponents();
        listarUsuarios();
//        getContentPane().setBackground(Color.white);
//        TableCustom.apply(jScrollPane2, TableCustom.TableType.MULTI_LINE);
    }

    private void testData(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        painelPrincipal = new javax.swing.JPanel();
        painelCabecalho = new javax.swing.JPanel();
        lblCabecalho = new javax.swing.JLabel();
        txtNomeAPesquisar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        painelConteudo = new javax.swing.JPanel();
        painelConteudoEsquerdo = new javax.swing.JPanel();
        lblIconLogo = new javax.swing.JLabel();
        painelVoltarMenu = new javax.swing.JPanel();
        btnVoltarMenu1 = new javax.swing.JButton();
        lblCabecalho1 = new javax.swing.JLabel();
        painelContCentral = new javax.swing.JPanel();
        painelSuperiorDados = new javax.swing.JPanel();
        painelEsqDados = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblApelido = new javax.swing.JLabel();
        txtApelido = new javax.swing.JTextField();
        lblNaturalidade = new javax.swing.JLabel();
        cbxNaturalidade = new javax.swing.JComboBox<>();
        lblDataNascimento = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblFuncao = new javax.swing.JLabel();
        cbxFuncao = new javax.swing.JComboBox<>();
        dateChooserDataNascimento = new com.toedter.calendar.JDateChooser();
        painelDirDados = new javax.swing.JPanel();
        lblNomeUsuario = new javax.swing.JLabel();
        txtNomeUsuario = new javax.swing.JTextField();
        lblSenha = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        cbxPerfilAcesso = new javax.swing.JComboBox<>();
        cbxStatus = new javax.swing.JComboBox<>();
        lblFoto = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtSenha = new javax.swing.JPasswordField();
        painelInferiorBotoesTabela = new javax.swing.JPanel();
        tabela = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaUsuarios = new javax.swing.JTable();
        botoes = new javax.swing.JPanel();
        btnCadastrar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCarregarCampos = new javax.swing.JButton();
        btnLimparCampos = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("USUÁRIOS");
        setMinimumSize(new java.awt.Dimension(1180, 650));

        painelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        painelPrincipal.setPreferredSize(new java.awt.Dimension(1260, 720));
        painelPrincipal.setLayout(new java.awt.BorderLayout());

        painelCabecalho.setBackground(new java.awt.Color(52, 102, 138));
        painelCabecalho.setForeground(new java.awt.Color(255, 255, 255));

        lblCabecalho.setFont(new java.awt.Font("Arial", 1, 40)); // NOI18N
        lblCabecalho.setForeground(new java.awt.Color(255, 255, 255));
        lblCabecalho.setText("Usuários");

        txtNomeAPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeAPesquisarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8_paid_search_32px.png"))); // NOI18N

        javax.swing.GroupLayout painelCabecalhoLayout = new javax.swing.GroupLayout(painelCabecalho);
        painelCabecalho.setLayout(painelCabecalhoLayout);
        painelCabecalhoLayout.setHorizontalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCabecalhoLayout.createSequentialGroup()
                .addComponent(lblCabecalho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 882, Short.MAX_VALUE)
                .addComponent(txtNomeAPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
        );
        painelCabecalhoLayout.setVerticalGroup(
            painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCabecalhoLayout.createSequentialGroup()
                .addComponent(lblCabecalho)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtNomeAPesquisar))
                .addContainerGap())
        );

        painelPrincipal.add(painelCabecalho, java.awt.BorderLayout.NORTH);

        painelConteudo.setBackground(new java.awt.Color(255, 255, 255));
        painelConteudo.setAlignmentX(0.0F);
        painelConteudo.setAlignmentY(0.0F);
        painelConteudo.setInheritsPopupMenu(true);
        painelConteudo.setLayout(new java.awt.BorderLayout(10, 10));

        painelConteudoEsquerdo.setBackground(new java.awt.Color(52, 102, 138));
        painelConteudoEsquerdo.setLayout(new java.awt.BorderLayout());

        lblIconLogo.setBackground(new java.awt.Color(52, 102, 138));
        lblIconLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/images/social-media.png"))); // NOI18N
        painelConteudoEsquerdo.add(lblIconLogo, java.awt.BorderLayout.CENTER);

        painelVoltarMenu.setBackground(new java.awt.Color(52, 102, 138));

        btnVoltarMenu1.setBackground(new java.awt.Color(52, 102, 138));
        btnVoltarMenu1.setForeground(new java.awt.Color(52, 102, 138));
        btnVoltarMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8-menu-48.png"))); // NOI18N
        btnVoltarMenu1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 2, true));
        btnVoltarMenu1.setContentAreaFilled(false);
        btnVoltarMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnVoltarMenu1.setOpaque(true);
        btnVoltarMenu1.setSelected(true);
        btnVoltarMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVoltarMenu1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnVoltarMenu1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnVoltarMenu1MouseExited(evt);
            }
        });
        btnVoltarMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarMenu1ActionPerformed(evt);
            }
        });
        painelVoltarMenu.add(btnVoltarMenu1);

        lblCabecalho1.setBackground(new java.awt.Color(52, 102, 138));
        lblCabecalho1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblCabecalho1.setForeground(new java.awt.Color(255, 255, 255));
        lblCabecalho1.setText("Voltar");
        painelVoltarMenu.add(lblCabecalho1);

        painelConteudoEsquerdo.add(painelVoltarMenu, java.awt.BorderLayout.NORTH);

        painelConteudo.add(painelConteudoEsquerdo, java.awt.BorderLayout.WEST);

        painelContCentral.setBackground(new java.awt.Color(255, 255, 255));
        painelContCentral.setLayout(new java.awt.BorderLayout());

        painelSuperiorDados.setBackground(new java.awt.Color(255, 255, 255));
        painelSuperiorDados.setLayout(new java.awt.GridLayout(1, 2));

        painelEsqDados.setBackground(new java.awt.Color(255, 255, 255));
        painelEsqDados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(13, 43, 64)));

        lblId.setText("Id:");

        txtId.setEditable(false);
        txtId.setBackground(new java.awt.Color(255, 255, 255));

        lblNome.setText("Nome:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeKeyTyped(evt);
            }
        });

        lblApelido.setText("Apelido:");

        txtApelido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtApelidoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApelidoKeyTyped(evt);
            }
        });

        lblNaturalidade.setText("Naturalidade:");

        cbxNaturalidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Maputo (Província)", "Maputo (Cidade)", "Gaza", "Inhambane", "Niassa", "Sofala", "Manica", "Tete", "Zambézia", "Nampula", "Cabo Delgado" }));

        lblDataNascimento.setText("Data de Nascimento:");

        lblEmail.setText("Email institucional:");

        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtEmailMouseExited(evt);
            }
        });
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        lblFuncao.setText("Funcao:");

        cbxFuncao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Administrador", "Gestor", "Operador" }));

        dateChooserDataNascimento.setDateFormatString("dd/MM/yyyy");

        javax.swing.GroupLayout painelEsqDadosLayout = new javax.swing.GroupLayout(painelEsqDados);
        painelEsqDados.setLayout(painelEsqDadosLayout);
        painelEsqDadosLayout.setHorizontalGroup(
            painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEsqDadosLayout.createSequentialGroup()
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataNascimento)
                            .addComponent(lblApelido)
                            .addComponent(lblNome)
                            .addComponent(lblId)
                            .addComponent(lblNaturalidade))
                        .addGap(18, 18, 18)
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNome)
                            .addComponent(txtApelido)
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbxNaturalidade, 0, 302, Short.MAX_VALUE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateChooserDataNascimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 53, Short.MAX_VALUE))))
                    .addGroup(painelEsqDadosLayout.createSequentialGroup()
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFuncao)
                            .addComponent(lblEmail))
                        .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(cbxFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(txtEmail)))))
                .addContainerGap())
        );
        painelEsqDadosLayout.setVerticalGroup(
            painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEsqDadosLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApelido)
                    .addComponent(txtApelido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNaturalidade)
                    .addComponent(cbxNaturalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDataNascimento)
                    .addComponent(dateChooserDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelEsqDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFuncao)
                    .addComponent(cbxFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        painelEsqDadosLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbxFuncao, cbxNaturalidade, lblApelido, lblDataNascimento, lblEmail, lblFuncao, lblId, lblNaturalidade, lblNome, txtApelido, txtEmail, txtId, txtNome});

        painelSuperiorDados.add(painelEsqDados);

        painelDirDados.setBackground(new java.awt.Color(255, 255, 255));
        painelDirDados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(13, 43, 64)));

        lblNomeUsuario.setText("Nome do Usuario:");

        txtNomeUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeUsuarioActionPerformed(evt);
            }
        });
        txtNomeUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomeUsuarioKeyPressed(evt);
            }
        });

        lblSenha.setText("Senha:");

        jLabel26.setText("Perfil de Acesso:");

        jLabel28.setText("Estado:");

        jCheckBox1.setText("Ver Senha");

        cbxPerfilAcesso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Administrador", "Gestor", "Operador" }));

        cbxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));

        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icons/icons8_account_128px.png"))); // NOI18N
        lblFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 102, 138), 2));

        jButton1.setText("Alterar a imagem");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelDirDadosLayout = new javax.swing.GroupLayout(painelDirDados);
        painelDirDados.setLayout(painelDirDadosLayout);
        painelDirDadosLayout.setHorizontalGroup(
            painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDirDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSenha)
                            .addComponent(jLabel26)
                            .addComponent(jLabel28))
                        .addGap(28, 28, 28)
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxPerfilAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1)
                            .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addComponent(lblNomeUsuario)
                        .addGap(18, 18, 18)
                        .addComponent(txtNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 38, Short.MAX_VALUE)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFoto))
                .addGap(66, 66, 66))
        );
        painelDirDadosLayout.setVerticalGroup(
            painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDirDadosLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addContainerGap(95, Short.MAX_VALUE))
                    .addGroup(painelDirDadosLayout.createSequentialGroup()
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNomeUsuario)
                            .addComponent(txtNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSenha)
                            .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelDirDadosLayout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(cbxPerfilAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painelDirDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel28)
                                    .addComponent(cbxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(painelDirDadosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        painelDirDadosLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCheckBox1, jLabel26, jLabel28, lblNomeUsuario, lblSenha});

        painelSuperiorDados.add(painelDirDados);

        painelContCentral.add(painelSuperiorDados, java.awt.BorderLayout.PAGE_START);

        painelInferiorBotoesTabela.setBackground(new java.awt.Color(255, 255, 255));
        painelInferiorBotoesTabela.setLayout(new java.awt.BorderLayout());

        tabela.setBackground(new java.awt.Color(255, 255, 255));
        tabela.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBackground(new java.awt.Color(0, 102, 102));

        tabelaUsuarios.setAutoCreateRowSorter(true);
        tabelaUsuarios.setForeground(new java.awt.Color(51, 51, 51));
        tabelaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Apelido", "Naturalidade", "Data de Nascimento", "Email institucional", "Funcao", "Usuario", "Senha", "Perfil", "Activo", "Disp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaUsuarios);
        if (tabelaUsuarios.getColumnModel().getColumnCount() > 0) {
            tabelaUsuarios.getColumnModel().getColumn(0).setPreferredWidth(35);
            tabelaUsuarios.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabelaUsuarios.getColumnModel().getColumn(4).setPreferredWidth(100);
            tabelaUsuarios.getColumnModel().getColumn(5).setPreferredWidth(180);
            tabelaUsuarios.getColumnModel().getColumn(10).setPreferredWidth(40);
            tabelaUsuarios.getColumnModel().getColumn(11).setPreferredWidth(40);
        }

        tabela.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        botoes.setBackground(new java.awt.Color(255, 255, 255));
        java.awt.GridBagLayout botoesLayout = new java.awt.GridBagLayout();
        botoesLayout.columnWidths = new int[] {0};
        botoesLayout.rowHeights = new int[] {0};
        botoes.setLayout(botoesLayout);

        btnCadastrar.setBackground(new java.awt.Color(52, 102, 138));
        btnCadastrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnCadastrar, gridBagConstraints);

        btnActualizar.setBackground(new java.awt.Color(52, 102, 138));
        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnActualizar, gridBagConstraints);

        btnCarregarCampos.setBackground(new java.awt.Color(52, 102, 138));
        btnCarregarCampos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCarregarCampos.setForeground(new java.awt.Color(255, 255, 255));
        btnCarregarCampos.setText("Carregar Campos");
        btnCarregarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarCamposActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnCarregarCampos, gridBagConstraints);

        btnLimparCampos.setBackground(new java.awt.Color(52, 102, 138));
        btnLimparCampos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLimparCampos.setForeground(new java.awt.Color(255, 255, 255));
        btnLimparCampos.setText("Limpar Campos");
        btnLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(btnLimparCampos, gridBagConstraints);

        jButton10.setBackground(new java.awt.Color(52, 102, 138));
        jButton10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("Apagar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 25, 10);
        botoes.add(jButton10, gridBagConstraints);

        tabela.add(botoes, java.awt.BorderLayout.PAGE_START);

        painelInferiorBotoesTabela.add(tabela, java.awt.BorderLayout.CENTER);

        painelContCentral.add(painelInferiorBotoesTabela, java.awt.BorderLayout.CENTER);

        painelConteudo.add(painelContCentral, java.awt.BorderLayout.CENTER);

        painelPrincipal.add(painelConteudo, java.awt.BorderLayout.CENTER);

        getContentPane().add(painelPrincipal, java.awt.BorderLayout.CENTER);

        jMenuBar1.setAlignmentY(0.5F);
        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeUsuarioActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showSaveDialog(this);
        File f = chooser.getSelectedFile();
        String path = f.getAbsolutePath();
        try {
            BufferedImage bi = ImageIO.read(new File(path));
            Image img = bi.getScaledInstance(132, 132, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(img);
            lblFoto.setIcon(icon);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNomeAPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeAPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeAPesquisarActionPerformed

    private void btnVoltarMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenu1MouseClicked
        btnVoltarMenu1.setBackground(new Color(52, 102, 138));
    }//GEN-LAST:event_btnVoltarMenu1MouseClicked

    private void btnVoltarMenu1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenu1MouseEntered
        btnVoltarMenu1.setBackground(new Color(45, 45, 45));
    }//GEN-LAST:event_btnVoltarMenu1MouseEntered

    private void btnVoltarMenu1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMenu1MouseExited
        btnVoltarMenu1.setBackground(new Color(52, 102, 138));
    }//GEN-LAST:event_btnVoltarMenu1MouseExited

    private void btnVoltarMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarMenu1ActionPerformed
        new MenuPrincipal().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarMenu1ActionPerformed

    private void txtNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyPressed

    }//GEN-LAST:event_txtNomeKeyPressed

    private void txtApelidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApelidoKeyPressed
//        char c = evt.getKeyChar();
//        if (!Character.isLetter(c) && !Character.isSpaceChar(c) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
//            evt.consume();
//            new Thread(() -> {
//                for (int i = 0; i < 3; i++) {
//                    try {
//                        Thread.sleep(200);
//                        txtApelido.setBackground(Color.RED);
//                        Thread.sleep(200);
//                        txtApelido.setBackground(Color.WHITE);
//                    } catch (InterruptedException e) {
//                        e.printStackTrace();
//                    }
//                }
//            }).start();
//            SwingUtilities.invokeLater(()
//                    -> JOptionPane.showMessageDialog(null, "Apenas letras são permitidas!")
//            );
//        }                                  
  


    }//GEN-LAST:event_txtApelidoKeyPressed

    private void txtNomeUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeUsuarioKeyPressed
                                        
  
    


        
    }//GEN-LAST:event_txtNomeUsuarioKeyPressed

    private void txtEmailMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmailMouseExited
//        String email = txtEmail.getText();
//        if (!email.contains("@")) {
//            new Thread(() -> {
//                for (int i = 0; i < 3; i++) {
//                    try {
//                        Thread.sleep(200);
//                        txtEmail.setBackground(Color.RED);
//                        Thread.sleep(200);
//                        txtEmail.setBackground(Color.WHITE);
//                    } catch (InterruptedException e) {
//                        e.printStackTrace();
//                    }
//                }
//            }).start();
//
//            SwingUtilities.invokeLater(()
//                    -> JOptionPane.showMessageDialog(null, "O email deve conter '@'!")
//            );
//            txtEmail.setText("");
//        }
    }//GEN-LAST:event_txtEmailMouseExited

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        if (camposObrigatoriosPreenchidos()) {
            cadastrarUsuario();
            listarUsuarios();
            limparCampos();
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos campos Obrigatorios!");
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        ActualizarUsuario();
        limparCampos();
        listarUsuarios();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnCarregarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarCamposActionPerformed
        CarregarCampos();
    }//GEN-LAST:event_btnCarregarCamposActionPerformed

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparCamposActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        ApagarUsuario();
        limparCampos();
        listarUsuarios();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
//        // Expressão regular para validar o formato do e-mail
//        String emailPattern = "^[\\w\\.-]+@[\\w\\.-]+\\.[a-z]{2,}$";
//        String email = txtEmail.getText();
//
//        // Verificar se o e-mail é válido
//        if (!email.matches(emailPattern)) {
//            // Exibe uma mensagem de erro
//            JOptionPane.showMessageDialog(this, "Por favor, insira um e-mail válido.", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
//            txtEmail.requestFocus(); // Volta o foco para o campo de e-mail
//        }

        // Expressão regular para validar o formato do e-mail
        String emailPattern = "^[\\w\\.-]+@[\\w\\.-]+\\.[a-z]{2,}$";
        String email = txtEmail.getText();

        // Verificar se o e-mail é válido
        if (!email.matches(emailPattern)) {
            // Altera a cor de fundo para vermelho se o e-mail for inválido
            txtEmail.setBackground(Color.PINK); // Ou Color.RED, mas PINK é mais suave
            JOptionPane.showMessageDialog(this, "Por favor, insira um e-mail válido.", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
        } else {
            // Restaura a cor de fundo para a cor padrão se o e-mail for válido
            txtEmail.setBackground(Color.WHITE);
        }


    }//GEN-LAST:event_txtEmailFocusLost

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtNomeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyTyped
                                   
    char c = evt.getKeyChar();

    // Verifica se o caractere é uma letra (minúscula ou maiúscula), espaço, setas esquerda/direita ou Backspace
    if (!Character.isLetter(c) && !Character.isSpaceChar(c) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
            && evt.getKeyCode() != KeyEvent.VK_LEFT && evt.getKeyCode() != KeyEvent.VK_RIGHT) {
        evt.consume(); // Impede a digitação do caractere inválido

        // Cria uma thread para alterar a cor de fundo do campo
        new Thread(() -> {
            for (int i = 0; i < 3; i++) {
                try {
                    Thread.sleep(200);
                    txtNome.setBackground(Color.RED); // Altera para vermelho
                    Thread.sleep(200);
                    txtNome.setBackground(Color.WHITE); // Restaura a cor normal
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        // Exibe a mensagem de erro
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "Apenas letras são permitidas!"));
    
}

    }//GEN-LAST:event_txtNomeKeyTyped

    private void txtNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyReleased
 
    }//GEN-LAST:event_txtNomeKeyReleased

    private void txtApelidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApelidoKeyTyped
       
                                   
    char c = evt.getKeyChar();

    // Verifica se o caractere é uma letra (minúscula ou maiúscula), espaço, setas esquerda/direita ou Backspace
    if (!Character.isLetter(c) && !Character.isSpaceChar(c) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
            && evt.getKeyCode() != KeyEvent.VK_LEFT && evt.getKeyCode() != KeyEvent.VK_RIGHT) {
        evt.consume(); // Impede a digitação do caractere inválido

        // Cria uma thread para alterar a cor de fundo do campo
        new Thread(() -> {
            for (int i = 0; i < 3; i++) {
                try {
                    Thread.sleep(200);
                    txtApelido.setBackground(Color.RED); // Altera para vermelho
                    Thread.sleep(200);
                    txtApelido.setBackground(Color.WHITE); // Restaura a cor normal
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        // Exibe a mensagem de erro
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "Apenas letras são permitidas!"));
    
}
    }//GEN-LAST:event_txtApelidoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            FlatCyanLightIJTheme.setup();
//            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsuariosView1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel botoes;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCarregarCampos;
    private javax.swing.JButton btnLimparCampos;
    private javax.swing.JButton btnVoltarMenu1;
    private javax.swing.JComboBox<String> cbxFuncao;
    private javax.swing.JComboBox<String> cbxNaturalidade;
    private javax.swing.JComboBox<String> cbxPerfilAcesso;
    private javax.swing.JComboBox<String> cbxStatus;
    private com.toedter.calendar.JDateChooser dateChooserDataNascimento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblApelido;
    private javax.swing.JLabel lblCabecalho;
    private javax.swing.JLabel lblCabecalho1;
    private javax.swing.JLabel lblDataNascimento;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblFuncao;
    private javax.swing.JLabel lblIconLogo;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNaturalidade;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNomeUsuario;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JPanel painelCabecalho;
    private javax.swing.JPanel painelContCentral;
    private javax.swing.JPanel painelConteudo;
    private javax.swing.JPanel painelConteudoEsquerdo;
    private javax.swing.JPanel painelDirDados;
    private javax.swing.JPanel painelEsqDados;
    private javax.swing.JPanel painelInferiorBotoesTabela;
    private javax.swing.JPanel painelPrincipal;
    private javax.swing.JPanel painelSuperiorDados;
    private javax.swing.JPanel painelVoltarMenu;
    private javax.swing.JPanel tabela;
    private javax.swing.JTable tabelaUsuarios;
    private javax.swing.JTextField txtApelido;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeAPesquisar;
    private javax.swing.JTextField txtNomeUsuario;
    private javax.swing.JPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables

    //Metodo para Cadastrar Funcionario
    private void cadastrarUsuario() {
        String nome = txtNome.getText().trim();
        String apelido = txtApelido.getText().trim();
        String naturalidade = cbxNaturalidade.getSelectedItem().toString();

        Date selectedDate = dateChooserDataNascimento.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String data = dateFormat.format(selectedDate);

        String email = txtEmail.getText().trim();
        String funcao = cbxFuncao.getSelectedItem().toString();
        String nomeUsuario = txtNomeUsuario.getText().trim();
        String senha = txtSenha.getText().trim();
        String perfil = cbxPerfilAcesso.getSelectedItem().toString();
        boolean status, disponibilidade;
        disponibilidade = true;
        if (cbxStatus.getItemAt(0) == "Activo") {
            status = true;

        } else {
            status = false;
        }

        // Verificações
        if (nome.isEmpty() || !nome.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Nome inválido.");
            return;
        }
        if (apelido.isEmpty() || !apelido.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Apelido inválido.");
            return;
        }
        if (data.isEmpty() || !data.matches("\\d{2}/\\d{2}/\\d{4}")) {
            JOptionPane.showMessageDialog(this, "Data de nascimento inválida.");
            return;
        }
        if (email.isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            JOptionPane.showMessageDialog(this, "Email inválido.");
            return;
        }
        if (nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome de usuário não pode estar vazio.");
            return;
        }
        if (senha.isEmpty() || senha.length() < 8) {
            JOptionPane.showMessageDialog(this, "Senha deve ter pelo menos 8 caracteres.");
            return;
        }
        if (perfil.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Perfil não pode estar vazio.");
            return;
        }

        FuncionarioModel funcionarioModel = new FuncionarioModel();
        funcionarioModel.setNome(nome);
        funcionarioModel.setApelido(apelido);
        funcionarioModel.setNaturalidade(naturalidade);
        funcionarioModel.setDataNascimento(data);
        funcionarioModel.setEmail(email);
        funcionarioModel.setFuncaoFuncionario(funcao);
        funcionarioModel.setNome(nomeUsuario);
        funcionarioModel.setSenhaFuncionario(senha);
        funcionarioModel.setPerfilDeAcesso(perfil);
        funcionarioModel.setStatus(status);
        funcionarioModel.setDisp(disponibilidade);

        FuncionarioController usuarioControler = new FuncionarioController();
        usuarioControler.cadastrarFuncionario(funcionarioModel);

    }

    //Metodo Actualizar
    private void ActualizarUsuario() {
        int id = Integer.parseInt(txtId.getText());
        String nome = txtNome.getText().trim();
        String apelido = txtApelido.getText().trim();
        String naturalidade = cbxNaturalidade.getSelectedItem().toString();

        Date selectedDate = dateChooserDataNascimento.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String data = dateFormat.format(selectedDate);

        String email = txtEmail.getText().trim();
        String funcao = cbxFuncao.getSelectedItem().toString();
        String nomeUsuario = txtNomeUsuario.getText().trim();
        String senha = txtSenha.getText().trim();
        String perfil = cbxPerfilAcesso.getSelectedItem().toString();
        boolean status, disponibilidade;
        disponibilidade = true;
        if (cbxStatus.getSelectedItem().toString().equals("Activo")) {
            status = true;
        } else {
            status = false;
        }

        //verificacoes
        if (nome.isEmpty() || !nome.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Nome inválido.");
            return;
        }
        if (apelido.isEmpty() || !apelido.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Apelido inválido.");
            return;
        }
        if (data.isEmpty() || !data.matches("\\d{2}/\\d{2}/\\d{4}")) {
            JOptionPane.showMessageDialog(this, "Data de nascimento inválida.");
            return;
        }

        if (email.isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            JOptionPane.showMessageDialog(this, "Email inválido.");
            return;
        }
        if (nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome de usuário não pode estar vazio.");
            return;
        }
        if (senha.isEmpty() || senha.length() < 8) {
            JOptionPane.showMessageDialog(this, "Senha deve ter pelo menos 8 caracteres.");
            return;
        }
        if (perfil.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Perfil não pode estar vazio.");
            return;
        }

        FuncionarioModel funcionarioModel = new FuncionarioModel();
        funcionarioModel.setIdFuncionario(id);
        funcionarioModel.setNome(nome);
        funcionarioModel.setApelido(apelido);
        funcionarioModel.setNaturalidade(naturalidade);
        funcionarioModel.setDataNascimento(data);
        funcionarioModel.setEmail(email);
        funcionarioModel.setFuncaoFuncionario(funcao);
        funcionarioModel.setNome(nomeUsuario);
        funcionarioModel.setSenhaFuncionario(senha);
        funcionarioModel.setPerfilDeAcesso(perfil);
        funcionarioModel.setStatus(status);
        funcionarioModel.setDisp(disponibilidade);

        FuncionarioController usuarioController = new FuncionarioController();
        usuarioController.ActualizarUsuario(funcionarioModel);
    }

    //Metodo Listar
    private void listarUsuarios() {
        try {
            FuncionarioController usuarioController = new FuncionarioController();

            DefaultTableModel model = (DefaultTableModel) tabelaUsuarios.getModel();
            model.setRowCount(0);

            ArrayList<FuncionarioModel> lista = usuarioController.PesquisarUsuario();
            System.out.println("Clientes encontrados: " + lista.size());
            System.out.println(lista.isEmpty());

            for (FuncionarioModel item : lista) {
                model.addRow(new Object[]{
                    item.getIdFuncionario(),
                    item.getNome(),
                    item.getApelido(),
                    item.getNaturalidade(),
                    item.getDataNascimento(),
                    item.getEmail(),
                    item.getFuncaoFuncionario(),
                    item.getNome(),
                    item.getSenhaFuncionario(),
                    item.getPerfilDeAcesso(),
                    item.getStatus(),
                    item.getDisp()
                });
            }
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "Listar Usuários View" + erro);
        }
    }

// Método Carregar Campos
    private void CarregarCampos() {
        int setar = tabelaUsuarios.getSelectedRow();
        txtId.setText(tabelaUsuarios.getModel().getValueAt(setar, 0).toString());
        txtNome.setText(tabelaUsuarios.getModel().getValueAt(setar, 1).toString());
        txtApelido.setText(tabelaUsuarios.getModel().getValueAt(setar, 2).toString());
        cbxNaturalidade.setSelectedItem(tabelaUsuarios.getModel().getValueAt(setar, 3).toString());

        // Carregar data de nascimento no JDateChooser
        Object dataNascimentoObj = tabelaUsuarios.getModel().getValueAt(setar, 4);
        if (dataNascimentoObj != null) {
            try {
                SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
                Date dataNascimento = formatador.parse(dataNascimentoObj.toString());
                dateChooserDataNascimento.setDate(dataNascimento);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }

        txtEmail.setText(tabelaUsuarios.getModel().getValueAt(setar, 5).toString());
        cbxFuncao.setSelectedItem(tabelaUsuarios.getModel().getValueAt(setar, 6).toString());
        txtNomeUsuario.setText(tabelaUsuarios.getModel().getValueAt(setar, 7).toString());
        txtSenha.setText(tabelaUsuarios.getModel().getValueAt(setar, 8).toString());
        cbxPerfilAcesso.setSelectedItem(tabelaUsuarios.getModel().getValueAt(setar, 9).toString());
        cbxStatus.setSelectedItem(tabelaUsuarios.getModel().getValueAt(setar, 10).toString());
    }

    //Metodo Prencher Campos obrigatorios
    private boolean camposObrigatoriosPreenchidos() {
        boolean nomePreenchido = !txtNome.getText().isEmpty();
        boolean apelidoPreenchido = !txtApelido.getText().isEmpty();
        boolean nomeUauario = !txtNomeUsuario.getText().isEmpty();
        boolean senhaUsuario = !txtSenha.getText().isEmpty();

        return nomePreenchido && apelidoPreenchido && nomeUauario && senhaUsuario;
    }

    //Metodo Limpar Campos
    private void limparCampos() {
        txtId.setText("");
        txtNome.setText("");
        txtApelido.setText("");
        dateChooserDataNascimento.setDate(null);
        txtEmail.setText("");
        txtNomeUsuario.setText("");
        txtSenha.setText("");
        cbxStatus.setSelectedIndex(0);
        cbxFuncao.setSelectedIndex(0);
        cbxNaturalidade.setSelectedIndex(0);
        cbxPerfilAcesso.setSelectedIndex(0);
        txtNome.requestFocus();
    }

    //Apagar 
    private void ApagarUsuario() {
        int id = Integer.parseInt(txtId.getText());
        String nome = txtNome.getText().trim();
        String apelido = txtApelido.getText().trim();
        String naturalidade = cbxNaturalidade.getSelectedItem().toString();

        Date selectedDate = dateChooserDataNascimento.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String data = dateFormat.format(selectedDate);

        String email = txtEmail.getText().trim();
        String funcao = cbxFuncao.getSelectedItem().toString();
        String nomeUsuario = txtNomeUsuario.getText().trim();
        String senha = txtSenha.getText().trim();
        String perfil = cbxPerfilAcesso.getSelectedItem().toString();
        boolean status, disponibilidade;
        disponibilidade = false;
        if (cbxStatus.getSelectedItem().toString().equals("Activo")) {
            status = true;
        } else {
            status = false;
        }

        //verificacoes
        if (nome.isEmpty() || !nome.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Nome inválido.");
            return;
        }
        if (apelido.isEmpty() || !apelido.matches("[a-zA-Z\\s]+")) {
            JOptionPane.showMessageDialog(this, "Apelido inválido.");
            return;
        }
        if (data.isEmpty() || !data.matches("\\d{2}/\\d{2}/\\d{4}")) {
            JOptionPane.showMessageDialog(this, "Data de nascimento inválida.");
            return;
        }

        if (email.isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            JOptionPane.showMessageDialog(this, "Email inválido.");
            return;
        }
        if (nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome de usuário não pode estar vazio.");
            return;
        }
        if (senha.isEmpty() || senha.length() < 8) {
            JOptionPane.showMessageDialog(this, "Senha deve ter pelo menos 8 caracteres.");
            return;
        }
        if (perfil.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Perfil não pode estar vazio.");
            return;
        }

        FuncionarioModel funcionarioModel = new FuncionarioModel();
        funcionarioModel.setIdFuncionario(id);
        funcionarioModel.setNome(nome);
        funcionarioModel.setApelido(apelido);
        funcionarioModel.setNaturalidade(naturalidade);
        funcionarioModel.setDataNascimento(data);
        funcionarioModel.setEmail(email);
        funcionarioModel.setFuncaoFuncionario(funcao);
        funcionarioModel.setNome(nomeUsuario);
        funcionarioModel.setSenhaFuncionario(senha);
        funcionarioModel.setPerfilDeAcesso(perfil);
        funcionarioModel.setStatus(status);
        funcionarioModel.setDisp(disponibilidade);

        FuncionarioController usuarioController = new FuncionarioController();
        usuarioController.ActualizarUsuario(funcionarioModel);

        JOptionPane.showMessageDialog(null, "Funcionario apagado com Sucesso.");

    }

}
